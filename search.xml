<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>双向链表</title>
      <link href="2020/11/30/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/30/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><hr><a id="more"></a><p><strong>结构体</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct link</span><br><span class="line">&#123;</span><br><span class="line">     int data;</span><br><span class="line">     struct link *left;</span><br><span class="line">     struct link *right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>双向链表的创建</strong>：<br>创建添加一个节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">struct link *addnode(struct link *head)</span><br><span class="line">&#123;</span><br><span class="line">     struct link *p&#x3D;NULL,*pr&#x3D;head;</span><br><span class="line">     int data;</span><br><span class="line">     p&#x3D;new link();</span><br><span class="line">     if(p&#x3D;&#x3D;NULL)</span><br><span class="line">     &#123;</span><br><span class="line">         cout&lt;&lt;&quot;内存分配失败&quot;&lt;&lt;endl;</span><br><span class="line">         exit(0);</span><br><span class="line">     &#125;</span><br><span class="line">     if(head&#x3D;&#x3D;NULL)</span><br><span class="line">     &#123;</span><br><span class="line">         head&#x3D;p;</span><br><span class="line">         p-&gt;left&#x3D;NULL;</span><br><span class="line">     &#125;</span><br><span class="line">     else</span><br><span class="line">     &#123;</span><br><span class="line">         while(pr-&gt;right!&#x3D;NULL)</span><br><span class="line">         &#123;</span><br><span class="line">             pr&#x3D;pr-&gt;right;</span><br><span class="line">         &#125;</span><br><span class="line">         pr-&gt;right&#x3D;p;</span><br><span class="line">         p-&gt;left&#x3D;pr;          &#x2F;&#x2F;关键</span><br><span class="line">     &#125;</span><br><span class="line">     cout&lt;&lt;&quot;请输入节点数据&quot;&lt;&lt;endl;</span><br><span class="line">     cin&gt;&gt;data;</span><br><span class="line">     p-&gt;data&#x3D;data; </span><br><span class="line">     p-&gt;right&#x3D;NULL;</span><br><span class="line">     return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双向链表的节点删除</strong><br>这里是释放一个节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void deletenode(struct link *head,int data)</span><br><span class="line">&#123;</span><br><span class="line">           struct link *p&#x3D;head;</span><br><span class="line">           struct link *p1&#x3D;NULL;</span><br><span class="line">           while(p-&gt;data!&#x3D;data)</span><br><span class="line">           &#123;</span><br><span class="line">               p1&#x3D;p;</span><br><span class="line">               p&#x3D;p-&gt;right;</span><br><span class="line">           &#125;</span><br><span class="line">           p1-&gt;right&#x3D;p-&gt;right;     &#x2F;&#x2F;关键</span><br><span class="line">           p-&gt;right-&gt;left&#x3D;p1;</span><br><span class="line">           free(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>列出所有节点信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">void DisplayNode(struct link *head) </span><br><span class="line">&#123;</span><br><span class="line">struct link *p&#x3D;head;</span><br><span class="line">int j&#x3D;1;</span><br><span class="line">while(p!&#x3D;NULL)</span><br><span class="line">&#123;</span><br><span class="line">    if(p-&gt;left&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;&quot;此节点的左节点为:NULL&quot;&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;&quot;此节点的右节点为:&quot;&lt;&lt;p-&gt;right-&gt;data&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(p-&gt;right&#x3D;&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;&quot;此节点的左节点为:&quot;&lt;&lt;p-&gt;left-&gt;data&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;&quot;此节点的右节点为:NULL&quot;&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;&quot;此节点的左节点为:&quot;&lt;&lt;p-&gt;left-&gt;data&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;&quot;此节点的右节点为:&quot;&lt;&lt;p-&gt;right-&gt;data&lt;&lt;endl;</span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    p&#x3D;p-&gt;right;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在固定的位置插入节点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">void insertnode(struct link *head,int data)</span><br><span class="line">&#123;</span><br><span class="line">           struct link *p&#x3D;head;</span><br><span class="line">           struct link *p1&#x3D;NULL;</span><br><span class="line">           struct link *p2&#x3D;NULL;</span><br><span class="line">           p2&#x3D;new link();</span><br><span class="line">           int data2;</span><br><span class="line">           while(p-&gt;data!&#x3D;data)</span><br><span class="line">           &#123;</span><br><span class="line">               p1&#x3D;p;</span><br><span class="line">               p&#x3D;p-&gt;right;</span><br><span class="line">           &#125;</span><br><span class="line">           p1&#x3D;p;</span><br><span class="line">           p&#x3D;p-&gt;right;</span><br><span class="line"></span><br><span class="line">           cout&lt;&lt;&quot;请输入你要插入的节点的数据&quot;&lt;&lt;endl;</span><br><span class="line">           cin&gt;&gt;data2;</span><br><span class="line">           p2-&gt;data&#x3D;data2;</span><br><span class="line">           p2-&gt;left&#x3D;NULL;</span><br><span class="line">           p2-&gt;right&#x3D;NULL;</span><br><span class="line"></span><br><span class="line">           p1-&gt;right&#x3D;p2;     &#x2F;&#x2F;关键</span><br><span class="line">           p2-&gt;right&#x3D;p;</span><br><span class="line">           p-&gt;left&#x3D;p2;</span><br><span class="line">           p2-&gt;left&#x3D;p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MAIN函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char juge;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    struct link *head&#x3D;NULL;</span><br><span class="line">    cout&lt;&lt;&quot;是否需要添加一个节点？(Y&#x2F;N)&quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;juge;</span><br><span class="line">    while(juge&#x3D;&#x3D;&#39;Y&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">        head&#x3D;addnode(head);</span><br><span class="line">        cout&lt;&lt;&quot;是否需要再添加一个节点？(Y&#x2F;N)&quot;&lt;&lt;endl;</span><br><span class="line">        cin&gt;&gt;juge;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;请问你是否要删除节点？(Y&#x2F;N)&quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;juge;</span><br><span class="line">    if(juge&#x3D;&#x3D;&#39;Y&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入你要删除的节点数据&quot;&lt;&lt;endl;</span><br><span class="line">    int data;</span><br><span class="line">    cin&gt;&gt;data;</span><br><span class="line">    deletenode(head,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;&quot;请问你是否要插入节点？(Y&#x2F;N)&quot;&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;juge;</span><br><span class="line">    if(juge&#x3D;&#x3D;&#39;Y&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">    cout&lt;&lt;&quot;请输入你要插入在哪个节点后面&quot;&lt;&lt;endl;</span><br><span class="line">    int data;</span><br><span class="line">    cin&gt;&gt;data;</span><br><span class="line">    insertnode(head,data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    displaynode(head);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="2020/11/20/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
      <url>2020/11/20/%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><hr><a id="more"></a><p><strong>结构体</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct link</span><br><span class="line">&#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct link *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>单链表的创建</strong>：<br>创建添加一个节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">struct link *AddNode(struct link *head)</span><br><span class="line">&#123;</span><br><span class="line">    struct link *p&#x3D;NULL,*pr&#x3D;head;</span><br><span class="line">int data;</span><br><span class="line">p&#x3D;new link(); </span><br><span class="line">if(p&#x3D;&#x3D;NULL)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;分配内存失败&quot;&lt;&lt;endl;</span><br><span class="line">    exit(0);&#x2F;&#x2F;非正常退出</span><br><span class="line">&#125;</span><br><span class="line">if(head&#x3D;&#x3D;NULL)</span><br><span class="line">&#123;</span><br><span class="line">    head&#x3D;p;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    while(pr-&gt;next!&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        pr&#x3D;pr-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pr-&gt;next&#x3D;p;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;&quot;请输入节点数据&quot;&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;data;</span><br><span class="line">p-&gt;data&#x3D;data;</span><br><span class="line">p-&gt;next&#x3D;NULL;</span><br><span class="line">return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>单链表的节点删除</strong><br>这里是将所有节点都释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void DeletMemory(struct link*head)</span><br><span class="line">&#123;</span><br><span class="line">    struct link*p&#x3D;head,*pr&#x3D;NULL;</span><br><span class="line">    while(p!&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        pr&#x3D;p;</span><br><span class="line">        p&#x3D;p-&gt;next;</span><br><span class="line">        free(pr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>列出所有节点信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void DisplayNode(struct link *head) </span><br><span class="line">&#123;</span><br><span class="line">     struct link *p&#x3D;head;</span><br><span class="line">     int j&#x3D;1;</span><br><span class="line">     while(p!&#x3D;NULL)</span><br><span class="line">   &#123;</span><br><span class="line">    cout&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    p&#x3D;p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##malloc与new<br>1.使用malloc要加上头文件#include<malloc>，并且malloc是和free一起使用的<br>2.(struct link <em>)这条语句的原因是malloc返回的是一个空的指针，你需要将他强制转换为struct link</em>类型的指针，C++规定void *类型可以强转为任何其他类型的的指针。<br>3.malloc函数的意思是分配一个内存大小至少为size参数所指定的字节数。<br>4.malloc的分配的内存大小需要我们自己计算,new可以自动计算。<br><strong>6.在C++中无疑用new来创建是更好的：P=new link();</strong><br>因为：比如你要在结构体中使用string，会出现内存错误，是因为使用malloc分配一个结构体内存，但是string是一个类。并没有调用string的构造函数，所以string在malloc之后没有正确构造，导致使用时段错误。</p><p>详情请见：</p><h3 id="malloc和new的区别"><a href="#malloc和new的区别" class="headerlink" title="malloc和new的区别"></a><a href="https://www.cnblogs.com/QG-whz/p/5140930.html">malloc和new的区别</a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to my blog</title>
      <link href="2020/11/16/hello/"/>
      <url>2020/11/16/hello/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的博客，如果你有什么好意见的话，请在下方评论告诉我哈！</p><a id="more"></a>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
